from fastapi import APIRouter, Depends, HTTPException, status, Optional
from sqlalchemy.orm import Session
import logging
from typing import List
from datetime import date

from app.schemas.goal import GoalCreate, GoalResponse, GoalUpdate, GoalStatus
from app.services.goal import (
   create_goal,
   get_goal_by_id,
   get_user_goals,
   update_goal,
   delete_goal,
   update_goal_progress
)
from app.database import get_db

logger = logging.getLogger(__name__)

router = APIRouter(
   prefix="/goals",
   tags=["goals"],
   responses={
       400: {"description": "Bad Request - Invalid goal data"},
       404: {"description": "Goal not found"},
       500: {"description": "Internal Server Error"}
   }
)

@router.post(
   "/",
   response_model=GoalResponse,
   status_code=status.HTTP_201_CREATED,
   summary="Create a new goal",
   description="Create a new financial goal for a user"
)
async def create_goal_endpoint(
   goal_data: GoalCreate,
   db_session: Session = Depends(get_db)
) -> GoalResponse:
   """
   Create a new financial goal with:
   
   - **user_id**: ID of the user who owns this goal
   - **name**: Name or title of the goal
   - **description**: Optional description of the goal
   - **target_amount**: Target amount to be achieved
   - **current_amount**: Current amount saved (defaults to 0)
   - **start_date**: Start date of the goal
   - **end_date**: Target end date of the goal
   """
   try:
       logger.info(f"Creating new goal for user: {goal_data.user_id}")
       return await create_goal(db_session, goal_data)
   except Exception as e:
       logger.error(f"Error in create_goal endpoint: {str(e)}")
       raise HTTPException(
           status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
           detail="An unexpected error occurred while creating the goal"
       ) from e

@router.get(
   "/user/{user_id}",
   response_model=List[GoalResponse],
   summary="Get user goals",
   description="Retrieve all goals for a specific user"
)
async def get_user_goals_endpoint(
   user_id: int,
   status: Optional[GoalStatus] = None,
   db_session: Session = Depends(get_db)
) -> List[GoalResponse]:
   """
   Retrieve goals for a specific user.
   
   - **user_id**: ID of the user to get goals for
   - **status**: Optional filter by goal status
   """
   try:
       return await get_user_goals(db_session, user_id, status)
   except Exception as e:
       logger.error(f"Error retrieving goals for user {user_id}: {str(e)}")
       raise HTTPException(
           status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
           detail="Error retrieving user goals"
       ) from e

@router.patch(
   "/{goal_id}/progress",
   response_model=GoalResponse,
   summary="Update goal progress",
   description="Update the current amount saved towards a goal"
)
async def update_goal_progress_endpoint(
   goal_id: int,
   current_amount: float,
   db_session: Session = Depends(get_db)
) -> GoalResponse:
   """
   Update a goal's progress.
   
   - **goal_id**: ID of the goal to update
   - **current_amount**: New current amount saved
   """
   try:
       return await update_goal_progress(db_session, goal_id, current_amount)
   except HTTPException:
       raise
   except Exception as e:
       logger.error(f"Error updating goal progress {goal_id}: {str(e)}")
       raise HTTPException(
           status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
           detail="Error updating goal progress"
       ) from e

@router.put(
   "/{goal_id}",
   response_model=GoalResponse,
   summary="Update goal",
   description="Update an existing financial goal"
)
async def update_goal_endpoint(
   goal_id: int,
   goal_data: GoalUpdate,
   db_session: Session = Depends(get_db)
) -> GoalResponse:
   """
   Update an existing goal.
   
   - **goal_id**: ID of the goal to update
   """
   try:
       return await update_goal(db_session, goal_id, goal_data)
   except HTTPException:
       raise
   except Exception as e:
       logger.error(f"Error updating goal {goal_id}: {str(e)}")
       raise HTTPException(
           status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
           detail="Error updating goal"
       ) from e

@router.delete(
   "/{goal_id}",
   status_code=status.HTTP_204_NO_CONTENT,
   summary="Delete goal",
   description="Delete an existing financial goal"
)
async def delete_goal_endpoint(
   goal_id: int,
   db_session: Session = Depends(get_db)
):
   """
   Delete a goal.
   
   - **goal_id**: ID of the goal to delete
   """
   try:
       await delete_goal(db_session, goal_id)
   except HTTPException:
       raise
   except Exception as e:
       logger.error(f"Error deleting goal {goal_id}: {str(e)}")
       raise HTTPException(
           status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
           detail="Error deleting goal"
       ) from e